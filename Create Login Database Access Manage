
USE tempdb;
GO

CREATE OR ALTER PROCEDURE usp_GrantAccess
    @UserName NVARCHAR(100) = 'Hello',
    @Password NVARCHAR(MAX) = '0x02002933BC22A6F305DCA4241FDB4703A9551',
    @IsPasswordHashed BIT = 1,
    @SID NVARCHAR(100) = '0x16DCE9F134DD24F7',
    @Schema NVARCHAR(128) = NULL,
    @GrantRead BIT = 1,
    @GrantWrite BIT = 1,
    @GrantExecute BIT = 1,
    @GrantViewDefinition BIT = 0,
    @GrantViewServerState BIT = 0,
    @CustomRoles NVARCHAR(MAX) = NULL,
    @DBName NVARCHAR(100) = NULL,
    @IncludeSystemDBs BIT = 0,
    @PrintOnly BIT = 1
AS
BEGIN
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @IsSqlLogin BIT = CASE WHEN CHARINDEX('\\', @UserName) = 0 THEN 1 ELSE 0 END;

    -- Generate a strong password if not provided for SQL login
    IF @IsSqlLogin = 1 AND @Password IS NULL
    BEGIN
        DECLARE @Chars NVARCHAR(100) = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
        DECLARE @CharLength INT = LEN(@Chars);
        DECLARE @i INT = 1;
        DECLARE @GeneratedPassword NVARCHAR(128) = '';
        WHILE @i <= 16
        BEGIN
            SET @GeneratedPassword += SUBSTRING(@Chars, CAST(RAND(CHECKSUM(NEWID())) * @CharLength AS INT) + 1, 1);
            SET @i += 1;
        END
        SET @Password = @GeneratedPassword;
    END

    -- Validate password complexity if SQL login and not hashed
    IF @IsSqlLogin = 1 AND @IsPasswordHashed = 0 AND (
        @Password IS NULL OR 
        LEN(@Password) < 16 OR 
        @Password NOT LIKE '%[A-Z]%' OR 
        @Password NOT LIKE '%[a-z]%' OR 
        @Password NOT LIKE '%[0-9]%' OR 
        @Password NOT LIKE '%[^a-zA-Z0-9]%'
    )
    BEGIN
        RAISERROR('Password must be at least 16 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character.', 16, 1);
        RETURN;
    END

    -- Create login if it doesn't exist
    IF NOT EXISTS (SELECT * FROM sys.server_principals WHERE name = @UserName)
    BEGIN
        IF @IsSqlLogin = 1
        BEGIN
            IF @IsPasswordHashed = 1
                SET @SQL = 'CREATE LOGIN [' + @UserName + '] WITH PASSWORD = ' + @Password + ' HASHED' +
                           ISNULL(', SID = ' + @SID, '') + ',
                           DEFAULT_DATABASE = [master],
                           DEFAULT_LANGUAGE = [us_english],
                           CHECK_POLICY = OFF,
                           CHECK_EXPIRATION = OFF;';
            ELSE
                SET @SQL = 'CREATE LOGIN [' + @UserName + '] WITH PASSWORD = ''' + @Password + ''';';
        END
        ELSE
            SET @SQL = 'CREATE LOGIN [' + @UserName + '] FROM WINDOWS;';

        PRINT @SQL;
        IF @PrintOnly = 0 EXEC sp_executesql @SQL;
    END

    -- Grant access to databases
    DECLARE @DBNameCursor NVARCHAR(100);
    DECLARE db_cursor CURSOR FOR
    SELECT name FROM sys.databases
    WHERE (@DBName IS NOT NULL AND name = @DBName)
       OR (@DBName IS NULL AND (@IncludeSystemDBs = 1 OR database_id > 4));

    OPEN db_cursor;
    FETCH NEXT FROM db_cursor INTO @DBNameCursor;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @SQL = 'USE [' + @DBNameCursor + '];';
        SET @SQL += '
            IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = ''' + @UserName + ''')
                CREATE USER [' + @UserName + '] FOR LOGIN [' + @UserName + '];
            ELSE
                ALTER USER [' + @UserName + '] WITH LOGIN = [' + @UserName + '];';

        IF @GrantRead = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' ALTER ROLE db_datareader ADD MEMBER [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT SELECT ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantWrite = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' ALTER ROLE db_datawriter ADD MEMBER [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT INSERT, UPDATE, DELETE ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantExecute = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' GRANT EXECUTE TO [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT EXECUTE ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantViewDefinition = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' GRANT VIEW DEFINITION TO [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT VIEW DEFINITION ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantViewServerState = 1
            SET @SQL += ' GRANT VIEW SERVER STATE TO [' + @UserName + '];';

        IF @CustomRoles IS NOT NULL
        BEGIN
            DECLARE @Role NVARCHAR(100);
            DECLARE @RolesCursor CURSOR;
            SET @RolesCursor = CURSOR FOR SELECT value FROM STRING_SPLIT(@CustomRoles, ',');

            OPEN @RolesCursor;
            FETCH NEXT FROM @RolesCursor INTO @Role;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @SQL += ' IF EXISTS (SELECT * FROM sys.database_principals WHERE name = ''' + @Role + ''')
                    ALTER ROLE [' + @Role + '] ADD MEMBER [' + @UserName + '];';
                FETCH NEXT FROM @RolesCursor INTO @Role;
            END

            CLOSE @RolesCursor;
            DEALLOCATE @RolesCursor;
        END

        PRINT @SQL;
        IF @PrintOnly = 0 EXEC sp_executesql @SQL;

        FETCH NEXT FROM db_cursor INTO @DBNameCursor;
    END

    CLOSE db_cursor;
    DEALLOCATE db_cursor;
END
GO
