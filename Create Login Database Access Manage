USE tempdb;
GO

CREATE OR ALTER PROCEDURE usp_GrantAccess
    @UserName NVARCHAR(100) = 'hellooo',
    @Password NVARCHAR(MAX) = NULL,
    @IsPasswordHashed BIT = 0,
    @SID NVARCHAR(100) = NULL,
    @Schema NVARCHAR(128) = NULL,
    @GrantRead BIT = 1,
    @GrantWrite BIT = 1,
    @GrantExecute BIT = 1,
    @GrantViewDefinition BIT = 0,
    @GrantViewServerState BIT = 0,
    @CustomRoles NVARCHAR(MAX) = NULL,
    @DBNames NVARCHAR(MAX) = '',
    @IncludeSystemDBs BIT = 0,
    @PrintOnly BIT = 1
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @IsSqlLogin BIT = CASE WHEN CHARINDEX('\', @UserName) = 0 THEN 1 ELSE 0 END;

    -- Generate a strong password only for SQL logins if not provided
    IF @IsSqlLogin = 1 AND (@Password IS NULL OR @Password = '')
    BEGIN
        DECLARE @Lower NVARCHAR(26) = 'abcdefghijklmnopqrstuvwxyz';
        DECLARE @Upper NVARCHAR(26) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        DECLARE @Digits NVARCHAR(10) = '0123456789';
        DECLARE @Special NVARCHAR(20) = '!@#$%^&*()-_=+[]{}';
        DECLARE @AllChars NVARCHAR(200) = @Lower + @Upper + @Digits + @Special;
        DECLARE @CharLength INT = LEN(@AllChars);
        DECLARE @GeneratedPassword NVARCHAR(128) = '';
        
        -- Ensure at least one character from each category
        SET @GeneratedPassword += SUBSTRING(@Lower, CAST(RAND() * LEN(@Lower) + 1 AS INT), 1);
        SET @GeneratedPassword += SUBSTRING(@Upper, CAST(RAND() * LEN(@Upper) + 1 AS INT), 1);
        SET @GeneratedPassword += SUBSTRING(@Digits, CAST(RAND() * LEN(@Digits) + 1 AS INT), 1);
        SET @GeneratedPassword += SUBSTRING(@Special, CAST(RAND() * LEN(@Special) + 1 AS INT), 1);

        -- Fill the rest of the password
        WHILE LEN(@GeneratedPassword) < 18
        BEGIN
            SET @GeneratedPassword += SUBSTRING(@AllChars, CAST(RAND() * @CharLength + 1 AS INT), 1);
        END

        SET @Password = @GeneratedPassword;
    END

    -- Validate password complexity only for SQL logins and if not hashed
    IF @IsSqlLogin = 1 AND @IsPasswordHashed = 0 AND (
        @Password IS NULL OR 
        LEN(@Password) < 16 OR 
        @Password NOT LIKE '%[A-Z]%' OR 
        @Password NOT LIKE '%[a-z]%' OR 
        @Password NOT LIKE '%[0-9]%' OR 
        @Password NOT LIKE '%[^a-zA-Z0-9]%'
    )
    BEGIN
        RAISERROR('Password must be at least 16 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character.', 16, 1);
        RETURN;
    END

    -- Create login if it doesn't exist
    IF NOT EXISTS (SELECT * FROM sys.server_principals WHERE name = @UserName)
    BEGIN
        IF @IsSqlLogin = 1
        BEGIN
            IF @IsPasswordHashed = 1
                SET @SQL = 'CREATE LOGIN [' + @UserName + '] WITH PASSWORD = ' + @Password + ' HASHED' +
                           ISNULL(', SID = ' + @SID, '') + ',
                           DEFAULT_DATABASE = [master],
                           DEFAULT_LANGUAGE = [us_english],
                           CHECK_POLICY = OFF,
                           CHECK_EXPIRATION = OFF;';
            ELSE
                SET @SQL = 'CREATE LOGIN [' + @UserName + '] WITH PASSWORD = ''' + REPLACE(@Password, '''', '''''') + ''';';
        END
        ELSE
            SET @SQL = 'CREATE LOGIN [' + @UserName + '] FROM WINDOWS;';

        PRINT @SQL;
        IF @PrintOnly = 0 EXEC sp_executesql @SQL;
    END

    -- Grant access to databases
    DECLARE @DBNameCursor NVARCHAR(100);
    DECLARE db_cursor CURSOR FOR
    SELECT TRIM(value) AS name
    FROM STRING_SPLIT(@DBNames, ',')
    WHERE TRIM(value) IN (SELECT name FROM sys.databases)
    AND (@IncludeSystemDBs = 1 OR TRIM(value) NOT IN ('master', 'model', 'msdb', 'tempdb'))
    UNION
    SELECT name
    FROM sys.databases
    WHERE @DBNames = '' AND @IncludeSystemDBs = 1
    AND name NOT IN ('master', 'model', 'msdb', 'tempdb');

    OPEN db_cursor;
    FETCH NEXT FROM db_cursor INTO @DBNameCursor;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @SQL = 'USE [' + @DBNameCursor + '];';
        SET @SQL += '
            IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = ''' + @UserName + ''')
                CREATE USER [' + @UserName + '] FOR LOGIN [' + @UserName + '];
            ELSE
                ALTER USER [' + @UserName + '] WITH LOGIN = [' + @UserName + '];';

        IF @GrantRead = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' ALTER ROLE db_datareader ADD MEMBER [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT SELECT ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantWrite = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' ALTER ROLE db_datawriter ADD MEMBER [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT INSERT, UPDATE, DELETE ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantExecute = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' GRANT EXECUTE TO [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT EXECUTE ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantViewDefinition = 1
        BEGIN
            IF @Schema IS NULL
                SET @SQL += ' GRANT VIEW DEFINITION TO [' + @UserName + '];';
            ELSE
                SET @SQL += ' GRANT VIEW DEFINITION ON SCHEMA::[' + @Schema + '] TO [' + @UserName + '];';
        END

        IF @GrantViewServerState = 1
            SET @SQL += ' GRANT VIEW SERVER STATE TO [' + @UserName + '];';

        IF @CustomRoles IS NOT NULL
        BEGIN
            DECLARE @Role NVARCHAR(100);
            DECLARE @RolesCursor CURSOR;
            SET @RolesCursor = CURSOR FOR SELECT TRIM(value) FROM STRING_SPLIT(@CustomRoles, ',');

            OPEN @RolesCursor;
            FETCH NEXT FROM @RolesCursor INTO @Role;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @SQL += ' IF EXISTS (SELECT * FROM sys.database_principals WHERE name = ''' + @Role + ''')
                    ALTER ROLE [' + @Role + '] ADD MEMBER [' + @UserName + '];';
                FETCH NEXT FROM @RolesCursor INTO @Role;
            END

            CLOSE @RolesCursor;
            DEALLOCATE @RolesCursor;
        END

        PRINT @SQL;
        IF @PrintOnly = 0 EXEC sp_executesql @SQL;

        FETCH NEXT FROM db_cursor INTO @DBNameCursor;
    END

    CLOSE db_cursor;
    DEALLOCATE db_cursor;
END
GO
