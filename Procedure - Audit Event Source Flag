USE master;
GO
-- This must be run on master. Drops procedure after execution.
-- Sets EventSourceFlags registry key to enable audit events to write to the Windows Security log.
-- See: https://support.microsoft.com/en-us/topic/kb4052136-fix-sql-server-audit-events-don-t-write-to-the-security-log-d9708450-6981-2fab-4e58-5f09d561110e
CREATE OR ALTER PROCEDURE usp_ManageAuditEventSourceFlags
    @AuditName NVARCHAR(128) = 'SqlThreatDetection_Audit', -- Name of the server audit
    @Action bit = 1,                                       -- Action: 0 (read) or 1 (write)
    @RestartAudit bit = 0,                                 -- Whether to restart audit
    @Execute bit = 1                                       -- 0: print commands, 1: execute commands
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InstanceName NVARCHAR(128);
    DECLARE @RegistryPath NVARCHAR(512);
    DECLARE @ValueName NVARCHAR(512) = 'EventSourceFlags';
    DECLARE @CurrentValue INT;
    DECLARE @RegistryValue INT = -1; -- Tracks the registry value or -1 if not set
    DECLARE @ReturnCode INT;
    DECLARE @SqlStmt NVARCHAR(4000);
    DECLARE @ErrorMessage NVARCHAR(4000);

    -- Get the current instance name
    SET @InstanceName = ISNULL(@@SERVICENAME, 'MSSQLSERVER');
    IF @InstanceName IS NULL
    BEGIN
        SET @ErrorMessage = 'Failed to retrieve SQL Server instance name. Ensure the procedure is executed on a valid SQL Server instance.';
        RAISERROR (@ErrorMessage, 16, 1);
        SELECT -1 AS RegistryValue, @ErrorMessage AS ErrorMessage;
        RETURN;
    END;

    -- Construct the registry path dynamically
    SET @RegistryPath = N'SYSTEM\CurrentControlSet\Services\EventLog\Security\MSSQL$' + @InstanceName + '$Audit';

    -- Validate audit name only if restarting audit
    IF @Action = 1 AND @RestartAudit = 1
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM sys.server_audits WHERE name = @AuditName)
        BEGIN
            SET @ErrorMessage = 'The specified audit ''' + @AuditName + ''' does not exist on the server. Use sys.server_audits to view available audits.';
            RAISERROR (@ErrorMessage, 16, 1);
            SELECT -1 AS RegistryValue, @ErrorMessage AS ErrorMessage;
            RETURN;
        END;
    END;

    -- Read the current registry value
    BEGIN TRY
        DECLARE @TempTable TABLE (ValueName NVARCHAR(512), ValueData INT);
        INSERT INTO @TempTable
        EXEC master.dbo.xp_regread 
            @rootkey = N'HKEY_LOCAL_MACHINE',
            @key = @RegistryPath,
            @value_name = @ValueName;

        -- Get the current value from the temp table
        SELECT @CurrentValue = ValueData FROM @TempTable;

        -- Set the registry value
        IF @CurrentValue IS NOT NULL
            SET @RegistryValue = @CurrentValue;
        ELSE
            SET @RegistryValue = -1; -- Key exists but no value set
    END TRY
    BEGIN CATCH
        SET @RegistryValue = -1;
        SET @ErrorMessage = 'Failed to read registry key ''' + @RegistryPath + '''. Error: ' + ERROR_MESSAGE();
        RAISERROR (@ErrorMessage, 10, 1); -- Warning level, does not terminate
    END CATCH;

    -- If action is read, return the current value
    IF @Action = 0
    BEGIN
        SELECT @RegistryValue AS RegistryValue, 
               CASE WHEN @RegistryValue = -1 THEN 'Registry key does not exist or has no value.' 
                    ELSE 'Current registry value.' END AS Message;
        RETURN;
    END;

    -- If action is write, proceed only if execute is 1
    IF @Action = 1
    BEGIN
        -- Show current value when not executing
        IF @Execute = 0
        BEGIN 
            SELECT @RegistryValue AS RegistryValue, 
                   CASE WHEN @RegistryValue = -1 THEN 'Registry key does not exist or has no value.' 
                        ELSE 'Current registry value.' END AS Message;
            -- Print commands that would be executed
            IF @RegistryValue = -1 OR @RegistryValue != 1
            BEGIN
                SET @SqlStmt = N'EXEC @ReturnCode = master.dbo.xp_regwrite 
                    @rootkey = N''HKEY_LOCAL_MACHINE'',
                    @key = N''' + @RegistryPath + ''',
                    @value_name = N''' + @ValueName + ''',
                    @type = N''REG_DWORD'',
                    @value = 1;';
                PRINT @SqlStmt;

                IF @RestartAudit = 1
                BEGIN
                    SET @SqlStmt = N'ALTER SERVER AUDIT [' + @AuditName + '] WITH (STATE = OFF);';
                    PRINT @SqlStmt;
                    SET @SqlStmt = N'ALTER SERVER AUDIT [' + @AuditName + '] WITH (STATE = ON);';
                    PRINT @SqlStmt;
                END;
            END
            ELSE
            BEGIN
                SELECT @RegistryValue AS RegistryValue, 
                       'Registry key already set to 1. No changes needed.' AS Message;
            END;
            RETURN;
        END;

        -- Execute changes only if @Execute = 1
        IF @RegistryValue = -1 OR @RegistryValue != 1
        BEGIN
            -- Set or create the registry key using xp_regwrite
            SET @SqlStmt = N'EXEC @ReturnCode = master.dbo.xp_regwrite 
                @rootkey = N''HKEY_LOCAL_MACHINE'',
                @key = N''' + @RegistryPath + ''',
                @value_name = N''' + @ValueName + ''',
                @type = N''REG_DWORD'',
                @value = 1;';
            PRINT @SqlStmt;
            BEGIN TRY
                EXEC sp_executesql @SqlStmt, N'@ReturnCode INT OUTPUT', @ReturnCode OUTPUT;

                IF @ReturnCode = 0
                BEGIN
                    -- Update the registry value
                    SET @RegistryValue = 1;

                    -- Restart the server audit to apply changes
                    IF @RestartAudit = 1
                    BEGIN
                        BEGIN TRY
                            -- Construct and execute dynamic SQL to stop the audit
                            SET @SqlStmt = N'ALTER SERVER AUDIT [' + @AuditName + '] WITH (STATE = OFF);';
                            PRINT @SqlStmt;
                            EXEC sp_executesql @SqlStmt;

                            -- Construct and execute dynamic SQL to start the audit
                            SET @SqlStmt = N'ALTER SERVER AUDIT [' + @AuditName + '] WITH (STATE = ON);';
                            PRINT @SqlStmt;
                            EXEC sp_executesql @SqlStmt;

                            SELECT @RegistryValue AS RegistryValue, 
                                   'Registry key set to 1 and audit ''' + @AuditName + ''' restarted.' AS Message;
                        END TRY
                        BEGIN CATCH
                            SET @ErrorMessage = 'Failed to restart audit ''' + @AuditName + '''. Registry key was set to 1, but audit restart failed. Error: ' + ERROR_MESSAGE();
                            RAISERROR (@ErrorMessage, 16, 1);
                            SELECT @RegistryValue AS RegistryValue, @ErrorMessage AS ErrorMessage;
                            RETURN;
                        END CATCH;
                    END
                    ELSE
                    BEGIN
                        SELECT @RegistryValue AS RegistryValue, 
                               'Registry key set to 1. Audit not restarted as @RestartAudit = 0.' AS Message;
                    END;
                END
                ELSE
                BEGIN
                    SET @ErrorMessage = 'Failed to set registry key ''' + @RegistryPath + ''' with value 1. Return code: ' + CAST(@ReturnCode AS NVARCHAR(10));
                    RAISERROR (@ErrorMessage, 16, 1);
                    SELECT -1 AS RegistryValue, @ErrorMessage AS ErrorMessage;
                    RETURN;
                END
            END TRY
            BEGIN CATCH
                SET @ErrorMessage = 'Failed to write to registry key ''' + @RegistryPath + '''. Error: ' + ERROR_MESSAGE();
                RAISERROR (@ErrorMessage, 16, 1);
                SELECT -1 AS RegistryValue, @ErrorMessage AS ErrorMessage;
                RETURN;
            END CATCH;
        END
        ELSE
        BEGIN
            SELECT @RegistryValue AS RegistryValue, 
                   'Registry key already set to 1. No changes made.' AS Message;
        END
    END
    ELSE
    BEGIN
        SET @ErrorMessage = 'Invalid action specified: ''' + CAST(@Action AS NVARCHAR(10)) + '''. Must be 0 (read) or 1 (write).';
        RAISERROR (@ErrorMessage, 16, 1);
        SELECT -1 AS RegistryValue, @ErrorMessage AS errorMessage;
        RETURN;
    END
END;
GO
EXEC usp_ManageAuditEventSourceFlags
GO
DROP PROCEDURE usp_ManageAuditEventSourceFlags
